import React, { useState, useRef, useEffect } from 'react';
import { Download, Save, Trash2, Pencil, Eraser, Maximize, Minimize } from 'lucide-react';

const QuickCricketPlan = () => {
  const [mode, setMode] = useState('training');
  const [elements, setElements] = useState([]);
  const [drawMode, setDrawMode] = useState(false);
  const [eraserMode, setEraserMode] = useState(false);
  const [drawColor, setDrawColor] = useState('#000000');
  const [isDrawing, setIsDrawing] = useState(false);
  const [drawingPaths, setDrawingPaths] = useState([]);
  const [currentPath, setCurrentPath] = useState([]);
  const [selectedElement, setSelectedElement] = useState(null);
  const [selectedAge, setSelectedAge] = useState('');
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [planName, setPlanName] = useState('');
  const [notesText, setNotesText] = useState('');
  const [goalsText, setGoalsText] = useState('');
  const [titleText, setTitleText] = useState('');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [pitchInitialized, setPitchInitialized] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const drawingCanvasRef = useRef(null);
  const fullscreenRef = useRef(null);

  const ageGroups = ['U8', 'U10', 'U12', 'U14', 'U16', 'U18', 'Adult'];

  const colors = [
    { value: '#000000', label: 'Black' },
    { value: '#ef4444', label: 'Red' },
    { value: '#3b82f6', label: 'Blue' },
    { value: '#22c55e', label: 'Green' },
    { value: '#eab308', label: 'Yellow' },
    { value: '#a855f7', label: 'Purple' }
  ];

  const tools = [
    { id: 'red-player', label: 'Red Player', countable: true },
    { id: 'blue-player', label: 'Blue Player', countable: true },
    { id: 'bat', label: 'Bat', countable: true },
    { id: 'white-cone', label: 'White Cone', countable: true },
    { id: 'blue-cone', label: 'Blue Cone', countable: true },
    { id: 'yellow-cone', label: 'Yellow Cone', countable: true },
    { id: 'green-cone', label: 'Green Cone', countable: true },
    { id: 'ball', label: 'Ball', countable: true },
    { id: 'tennis-ball', label: 'Tennis Ball', countable: true },
    { id: 'incrediball', label: 'Incrediball', countable: true },
    { id: 'hurdle', label: 'Hurdle', countable: true },
    { id: 'ramp', label: 'Katchet Ramp', countable: true },
    { id: 'yellow-pole', label: 'Yellow Pole', countable: true },
    { id: 'stumps', label: 'Stumps (3)', countable: true },
    { id: 'single-stump', label: 'Single Stump', countable: true },
    { id: 'pitch', label: 'Pitch', countable: false },
    { id: 'full-pitch-bg', label: 'Full Pitch BG', countable: false }
  ];

  useEffect(() => {
    if (mode === 'pitch' && !pitchInitialized) {
      const centerX = 500;
      const centerY = 350;
      const radius = 220;
      
      const newElements = [];
      
      newElements.push({
        id: Date.now(),
        type: 'blue-player',
        x: centerX,
        y: centerY + 130,
        rotation: 0,
        label: 'WK'
      });
      
      newElements.push({
        id: Date.now() + 1,
        type: 'blue-player',
        x: centerX,
        y: centerY - 130,
        rotation: 0,
        label: 'B'
      });
      
      for (let i = 0; i < 9; i++) {
        const angle = (i / 9) * 2 * Math.PI;
        newElements.push({
          id: Date.now() + i + 2,
          type: 'blue-player',
          x: centerX + radius * Math.cos(angle),
          y: centerY + radius * Math.sin(angle),
          rotation: 0
        });
      }
      
      newElements.push({
        id: Date.now() + 100,
        type: 'bat',
        x: centerX,
        y: centerY + 110,
        rotation: 45
      });
      
      newElements.push({
        id: Date.now() + 101,
        type: 'bat',
        x: centerX,
        y: centerY - 110,
        rotation: 315
      });
      
      newElements.push({
        id: Date.now() + 102,
        type: 'ball',
        x: centerX,
        y: centerY - 80,
        rotation: 0
      });
      
      setElements(newElements);
      setPitchInitialized(true);
    }
  }, [mode, pitchInitialized]);

  const handleModeChange = (newMode) => {
    if (newMode === 'training') {
      setElements([]);
      setPitchInitialized(false);
    }
    setMode(newMode);
    setDrawMode(false);
    setEraserMode(false);
  };

  const addElement = (type) => {
    const setupBox = document.getElementById('setup-box');
    const setupRect = setupBox ? setupBox.getBoundingClientRect() : null;
    const canvasRect = document.getElementById('canvas-area') ? document.getElementById('canvas-area').getBoundingClientRect() : null;
    
    let x = mode === 'training' ? 400 : 300;
    let y = mode === 'training' ? 300 : 200;
    
    if (mode === 'training' && setupRect && canvasRect) {
      x = setupRect.left - canvasRect.left + 100;
      y = setupRect.top - canvasRect.top + 100;
    }
    
    const newElement = {
      id: Date.now(),
      type,
      x,
      y,
      rotation: 0
    };
    setElements([...elements, newElement]);
  };

  const getEquipmentCounts = () => {
    const counts = {};
    elements.forEach(el => {
      const tool = tools.find(t => t.id === el.type);
      if (tool && tool.countable) {
        counts[el.type] = (counts[el.type] || 0) + 1;
      }
    });
    return counts;
  };

  const handleElementMouseDown = (e, element) => {
    if (drawMode || eraserMode) return;
    e.stopPropagation();
    e.preventDefault();
    setSelectedElement(element.id);
    setIsDragging(true);
    
    const canvasArea = document.getElementById('canvas-area');
    const rect = canvasArea.getBoundingClientRect();
    
    setDragOffset({
      x: e.clientX - rect.left - element.x,
      y: e.clientY - rect.top - element.y
    });
  };

  const handleCanvasMouseMove = (e) => {
    if (drawMode && isDrawing && drawingCanvasRef.current) {
      const rect = drawingCanvasRef.current.getBoundingClientRect();
      setCurrentPath([...currentPath, { x: e.clientX - rect.left, y: e.clientY - rect.top }]);
    } else if (eraserMode && isDrawing && drawingCanvasRef.current) {
      const rect = drawingCanvasRef.current.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      setDrawingPaths(drawingPaths.filter(path => {
        return !path.path.some(point => {
          const distance = Math.sqrt(Math.pow(point.x - x, 2) + Math.pow(point.y - y, 2));
          return distance < 20;
        });
      }));
    } else if (selectedElement && isDragging) {
      const canvasArea = document.getElementById('canvas-area');
      const rect = canvasArea.getBoundingClientRect();
      const newX = e.clientX - rect.left - dragOffset.x;
      const newY = e.clientY - rect.top - dragOffset.y;
      
      setElements(elements.map(el => 
        el.id === selectedElement ? { ...el, x: newX, y: newY } : el
      ));
    }
  };

  const handleCanvasMouseUp = () => {
    if (drawMode && isDrawing && currentPath.length > 0) {
      setDrawingPaths([...drawingPaths, { path: currentPath, color: drawColor }]);
      setCurrentPath([]);
    }
    setIsDrawing(false);
    setSelectedElement(null);
    setIsDragging(false);
  };

  const handleCanvasMouseDown = (e) => {
    const target = e.target;
    if ((drawMode || eraserMode) && (target.tagName === 'CANVAS' || target.id === 'canvas-area')) {
      setIsDrawing(true);
      if (drawMode) {
        const rect = drawingCanvasRef.current.getBoundingClientRect();
        setCurrentPath([{ x: e.clientX - rect.left, y: e.clientY - rect.top }]);
      }
    }
  };

  const rotateElement = (id) => {
    setElements(elements.map(el => 
      el.id === id ? { ...el, rotation: (el.rotation + 45) % 360 } : el
    ));
  };

  const deleteElement = (id) => {
    setElements(elements.filter(el => el.id !== id));
  };

  useEffect(() => {
    const canvas = drawingCanvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.lineWidth = 3;
    
    drawingPaths.forEach(pathObj => {
      if (pathObj.path.length < 2) return;
      ctx.strokeStyle = pathObj.color;
      ctx.globalAlpha = 0.7;
      ctx.beginPath();
      ctx.moveTo(pathObj.path[0].x, pathObj.path[0].y);
      pathObj.path.forEach(point => ctx.lineTo(point.x, point.y));
      ctx.stroke();
    });
    
    if (currentPath.length > 1) {
      ctx.strokeStyle = drawColor;
      ctx.globalAlpha = 0.7;
      ctx.beginPath();
      ctx.moveTo(currentPath[0].x, currentPath[0].y);
      currentPath.forEach(point => ctx.lineTo(point.x, point.y));
      ctx.stroke();
    }
    
    ctx.globalAlpha = 1;
  }, [drawingPaths, currentPath, drawColor]);

  const toggleFullscreen = async () => {
    if (!document.fullscreenElement) {
      try {
        await fullscreenRef.current.requestFullscreen();
        setIsFullscreen(true);
      } catch (err) {
        console.error('Error attempting to enable fullscreen:', err);
      }
    } else {
      try {
        await document.exitFullscreen();
        setIsFullscreen(false);
      } catch (err) {
        console.error('Error attempting to exit fullscreen:', err);
      }
    }
  };

  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };
    
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);

  const exportToPDF = async () => {
    try {
      // Show loading message
      alert('Generating PDF... Please wait.');
      
      const jsPDF = (await import('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js')).jsPDF;
      const html2canvas = (await import('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js')).default;
      
      const element = document.getElementById('canvas-area');
      if (!element) {
        alert('Canvas area not found');
        return;
      }
      
      const canvas = await html2canvas(element, { 
        scale: 2,
        useCORS: true,
        logging: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });
      
      const imgData = canvas.toDataURL('image/png');
      
      const pdf = new jsPDF('landscape', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      
      // Calculate dimensions to fit
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / (imgWidth * 0.264583), pdfHeight / (imgHeight * 0.264583));
      const width = imgWidth * 0.264583 * ratio;
      const height = imgHeight * 0.264583 * ratio;
      
      pdf.addImage(imgData, 'PNG', (pdfWidth - width) / 2, (pdfHeight - height) / 2, width, height);
      pdf.save(`cricket-session-plan-${Date.now()}.pdf`);
      
      alert('PDF downloaded successfully!');
    } catch (error) {
      console.error('Error exporting PDF:', error);
      alert('Failed to export PDF: ' + error.message);
    }
  };

  const savePlan = async () => {
    if (!planName.trim() || !selectedAge) {
      alert('Please enter a plan name and select an age group');
      return;
    }
    
    const planData = {
      name: planName,
      ageGroup: selectedAge,
      mode,
      elements,
      drawingPaths,
      notesText,
      goalsText,
      titleText,
      timestamp: Date.now()
    };
    
    try {
      await window.storage.set(
        `plan:${selectedAge}:${Date.now()}`,
        JSON.stringify(planData)
      );
      alert('Plan saved successfully!');
      setShowSaveModal(false);
      setPlanName('');
    } catch (error) {
      console.error('Save failed:', error);
      alert('Failed to save plan');
    }
  };

  const clearAll = () => {
    if (confirm('Clear all elements and drawings?')) {
      setElements([]);
      setDrawingPaths([]);
      setCurrentPath([]);
      if (mode === 'pitch') {
        setPitchInitialized(false);
      }
    }
  };

  const renderConeIcon = (color) => (
    <svg width="40" height="40" viewBox="0 0 40 40">
      <circle cx="20" cy="20" r="14" fill={color} stroke="#000" strokeWidth="2" opacity="0.85"/>
      <circle cx="20" cy="20" r="6" fill="none" stroke="#000" strokeWidth="2"/>
    </svg>
  );

  const renderToolIcon = (type) => {
    const iconMap = {
      'red-player': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="15" fill="#b91c1c" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>,
      'blue-player': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="15" fill="#1e3a8a" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>,
      'bat': <svg width="40" height="40" viewBox="0 0 40 40"><ellipse cx="20" cy="6" rx="5" ry="7" fill="#333" stroke="#000" strokeWidth="1.5"/><line x1="17" y1="11" x2="23" y2="11" stroke="#000" strokeWidth="1" opacity="0.5"/><line x1="17" y1="8" x2="23" y2="8" stroke="#000" strokeWidth="1" opacity="0.5"/><line x1="17" y1="5" x2="23" y2="5" stroke="#000" strokeWidth="1" opacity="0.5"/><rect x="12" y="7" width="16" height="28" fill="#8b4513" stroke="#000" strokeWidth="1.5" rx="2"/><rect x="14" y="20" width="12" height="10" fill="#6b3410" opacity="0.3"/></svg>,
      'white-cone': renderConeIcon('#ffffff'),
      'blue-cone': renderConeIcon('#3b82f6'),
      'yellow-cone': renderConeIcon('#eab308'),
      'green-cone': renderConeIcon('#22c55e'),
      'ball': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="13" fill="#dc2626" stroke="#000" strokeWidth="2" opacity="0.9"/><path d="M 10 20 Q 20 14 30 20" stroke="#000" strokeWidth="2" fill="none"/></svg>,
      'tennis-ball': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="13" fill="#84cc16" stroke="#000" strokeWidth="2" opacity="0.95"/><path d="M 8 15 Q 12 20 8 25" stroke="#fff" strokeWidth="3.5" fill="none"/><path d="M 32 15 Q 28 20 32 25" stroke="#fff" strokeWidth="3.5" fill="none"/></svg>,
      'incrediball': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="13" fill="#fb923c" stroke="#000" strokeWidth="2" opacity="0.9"/><circle cx="20" cy="20" r="9" fill="none" stroke="#fff" strokeWidth="1.5"/><circle cx="20" cy="20" r="5" fill="none" stroke="#fff" strokeWidth="1.5"/></svg>,
      'hurdle': <svg width="40" height="40" viewBox="0 0 40 40"><rect x="8" y="18" width="24" height="4" fill="#eab308" stroke="#000" strokeWidth="2" rx="1"/></svg>,
      'ramp': <svg width="40" height="40" viewBox="0 0 40 40"><path d="M 8 28 L 35 18 L 35 28 Z" fill="#ff8c00" stroke="#000" strokeWidth="2"/></svg>,
      'yellow-pole': <svg width="40" height="40" viewBox="0 0 40 40"><rect x="17" y="5" width="6" height="30" fill="#eab308" stroke="#000" strokeWidth="2" rx="1"/></svg>,
      'stumps': <svg width="40" height="40" viewBox="0 0 40 40"><rect x="10" y="8" width="5" height="24" fill="#d4a574" stroke="#000" strokeWidth="1.5"/><rect x="18" y="8" width="5" height="24" fill="#d4a574" stroke="#000" strokeWidth="1.5"/><rect x="26" y="8" width="5" height="24" fill="#d4a574" stroke="#000" strokeWidth="1.5"/><rect x="8" y="6" width="24" height="3" fill="#d4a574" stroke="#000" strokeWidth="1.5"/></svg>,
      'single-stump': <svg width="40" height="40" viewBox="0 0 40 40"><rect x="17" y="8" width="6" height="24" fill="#d4a574" stroke="#000" strokeWidth="2"/><rect x="15" y="6" width="10" height="3" fill="#d4a574" stroke="#000" strokeWidth="1.5"/></svg>,
      'pitch': <svg width="40" height="40" viewBox="0 0 40 40"><rect x="8" y="2" width="24" height="36" fill="#fff" stroke="#000" strokeWidth="2"/><line x1="8" y1="8" x2="32" y2="8" stroke="#000" strokeWidth="1.5"/><line x1="8" y1="32" x2="32" y2="32" stroke="#000" strokeWidth="1.5"/></svg>,
      'full-pitch-bg': <svg width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="18" fill="#86efac" stroke="#000" strokeWidth="1.5"/><circle cx="20" cy="20" r="10" fill="none" stroke="#000" strokeWidth="1" strokeDasharray="2,2"/><rect x="15" y="11" width="10" height="18" fill="#f5f5f5" stroke="#000" strokeWidth="1.5"/></svg>
    };
    return iconMap[type] || null;
  };

  const renderCone = (color, isSelected) => (
    <svg width="30" height="30">
      <circle cx="15" cy="15" r="12" fill={color} stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.85"/>
      <circle cx="15" cy="15" r="5" fill="none" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2' : '1.5'}/>
    </svg>
  );

  const renderElement = (el) => {
    const transform = `translate(${el.x}px, ${el.y}px) rotate(${el.rotation}deg)`;
    const isSelected = selectedElement === el.id;
    
    const elementProps = {
      onMouseDown: (e) => handleElementMouseDown(e, el),
      onDoubleClick: () => rotateElement(el.id),
      onContextMenu: (e) => { e.preventDefault(); deleteElement(el.id); },
      style: { cursor: (drawMode || eraserMode) ? 'default' : 'move' }
    };

    const coneColors = {
      'white-cone': '#ffffff',
      'blue-cone': '#3b82f6',
      'yellow-cone': '#eab308',
      'green-cone': '#22c55e'
    };

    const renderSVG = () => {
      switch(el.type) {
        case 'red-player':
          return <svg width="30" height="30"><circle cx="15" cy="15" r="12" fill="#b91c1c" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.9"/></svg>;
        case 'blue-player':
          return (
            <svg width="30" height="30">
              <circle cx="15" cy="15" r="12" fill="#1e3a8a" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.9"/>
              {el.label && <text x="15" y="19" textAnchor="middle" fill="#fff" fontSize="10" fontWeight="bold" fontFamily="Arial">{el.label}</text>}
            </svg>
          );
        case 'bat':
          return <svg width="50" height="60"><ellipse cx="25" cy="5" rx="6" ry="10" fill="#333" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/><line x1="22" y1="12" x2="28" y2="12" stroke="#000" strokeWidth="1" opacity="0.5"/><line x1="22" y1="8" x2="28" y2="8" stroke="#000" strokeWidth="1" opacity="0.5"/><line x1="22" y1="4" x2="28" y2="4" stroke="#000" strokeWidth="1" opacity="0.5"/><rect x="15" y="8" width="20" height="45" fill="#8b4513" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} rx="3"/><rect x="17" y="30" width="16" height="15" fill="#6b3410" opacity="0.3"/></svg>;
        case 'white-cone':
        case 'blue-cone':
        case 'yellow-cone':
        case 'green-cone':
          return renderCone(coneColors[el.type], isSelected);
        case 'ball':
          return <svg width="20" height="20"><circle cx="10" cy="10" r="8" fill="#dc2626" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.9"/><path d="M 4 10 Q 10 6 16 10" stroke="#000" strokeWidth="1.5" fill="none"/></svg>;
        case 'tennis-ball':
          return <svg width="20" height="20"><circle cx="10" cy="10" r="8" fill="#84cc16" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.95"/><path d="M 3 7 Q 6 10 3 13" stroke="#fff" strokeWidth="3" fill="none"/><path d="M 17 7 Q 14 10 17 13" stroke="#fff" strokeWidth="3" fill="none"/></svg>;
        case 'incrediball':
          return <svg width="20" height="20"><circle cx="10" cy="10" r="8" fill="#fb923c" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} opacity="0.9"/><circle cx="10" cy="10" r="6" fill="none" stroke="#fff" strokeWidth="1.2"/><circle cx="10" cy="10" r="3.5" fill="none" stroke="#fff" strokeWidth="1.2"/></svg>;
        case 'hurdle':
          return <svg width="40" height="15"><rect x="5" y="5" width="30" height="5" fill="#eab308" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} rx="1"/></svg>;
        case 'ramp':
          return <svg width="45" height="25"><path d="M 5 22 L 40 12 L 40 22 Z" fill="#ff8c00" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/></svg>;
        case 'yellow-pole':
          return <svg width="20" height="50"><rect x="7" y="5" width="6" height="40" fill="#eab308" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'} rx="1"/></svg>;
        case 'stumps':
          return <svg width="50" height="44"><rect x="10" y="8" width="5" height="28" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'}/><rect x="22" y="8" width="5" height="28" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'}/><rect x="34" y="8" width="5" height="28" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'}/><rect x="8" y="6" width="34" height="3" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'}/></svg>;
        case 'single-stump':
          return <svg width="25" height="44"><rect x="9" y="8" width="7" height="28" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/><rect x="7" y="6" width="11" height="3" fill="#d4a574" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'}/></svg>;
        case 'pitch':
          return <svg width="180" height="280"><rect x="10" y="10" width="160" height="260" fill="#fff" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/><line x1="10" y1="35" x2="170" y2="35" stroke="#000" strokeWidth="2"/><line x1="10" y1="245" x2="170" y2="245" stroke="#000" strokeWidth="2"/><line x1="90" y1="35" x2="90" y2="245" stroke="#000" strokeWidth="1" strokeDasharray="5,5"/><rect x="60" y="28" width="60" height="14" fill="none" stroke="#000" strokeWidth="2"/><rect x="60" y="238" width="60" height="14" fill="none" stroke="#000" strokeWidth="2"/></svg>;
        case 'full-pitch-bg':
          return <svg width="200" height="200"><circle cx="100" cy="100" r="90" fill="#86efac" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/><circle cx="100" cy="100" r="50" fill="none" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '2.5' : '1.5'} strokeDasharray="8,4"/><rect x="75" y="40" width="50" height="120" fill="#f5f5f5" stroke={isSelected ? '#fbbf24' : '#000'} strokeWidth={isSelected ? '3' : '2'}/><line x1="75" y1="55" x2="125" y2="55" stroke="#000" strokeWidth="2"/><line x1="75" y1="145" x2="125" y2="145" stroke="#000" strokeWidth="2"/></svg>;
        default:
          return null;
      }
    };

    const origins = {
      'red-player': '15px 15px', 'blue-player': '15px 15px', 'bat': '25px 30px',
      'white-cone': '15px 15px', 'blue-cone': '15px 15px', 'yellow-cone': '15px 15px', 'green-cone': '15px 15px',
      'ball': '10px 10px', 'tennis-ball': '10px 10px', 'incrediball': '10px 10px', 'hurdle': '20px 7.5px', 'ramp': '22.5px 15px',
      'yellow-pole': '10px 25px', 'stumps': '25px 22px', 'single-stump': '12.5px 22px', 'pitch': '90px 140px', 'full-pitch-bg': '100px 100px'
    };

    return (
      <div key={el.id} style={{ position: 'absolute', left: 0, top: 0, transform, transformOrigin: origins[el.type] }}>
        <div {...elementProps}>{renderSVG()}</div>
      </div>
    );
  };

  const renderEquipmentIcon = (type) => {
    const iconSize = 14;
    switch(type) {
      case 'red-player':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 30 30"><circle cx="15" cy="15" r="12" fill="#b91c1c" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>;
      case 'blue-player':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 30 30"><circle cx="15" cy="15" r="12" fill="#1e3a8a" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>;
      case 'bat':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 50 60"><ellipse cx="25" cy="5" rx="6" ry="10" fill="#333" stroke="#000" strokeWidth="1.5"/><rect x="15" y="8" width="20" height="45" fill="#8b4513" stroke="#000" strokeWidth="1.5" rx="3"/></svg>;
      case 'ball':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 20 20"><circle cx="10" cy="10" r="8" fill="#dc2626" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>;
      case 'tennis-ball':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 20 20"><circle cx="10" cy="10" r="8" fill="#84cc16" stroke="#000" strokeWidth="2" opacity="0.95"/></svg>;
      case 'incrediball':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 20 20"><circle cx="10" cy="10" r="8" fill="#fb923c" stroke="#000" strokeWidth="2" opacity="0.9"/></svg>;
      case 'hurdle':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 40 15"><rect x="5" y="5" width="30" height="5" fill="#eab308" stroke="#000" strokeWidth="2" rx="1"/></svg>;
      case 'ramp':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 45 25"><path d="M 5 22 L 40 12 L 40 22 Z" fill="#ff8c00" stroke="#000" strokeWidth="2"/></svg>;
      case 'yellow-pole':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 20 50"><rect x="7" y="5" width="6" height="40" fill="#eab308" stroke="#000" strokeWidth="2" rx="1"/></svg>;
      case 'stumps':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 50 44"><rect x="10" y="8" width="5" height="28" fill="#d4a574" stroke="#000" strokeWidth="1.5"/><rect x="22" y="8" width="5" height="28" fill="#d4a574" stroke="#000" strokeWidth="1.5"/><rect x="34" y="8" width="5" height="28" fill="#d4a574" stroke="#000" strokeWidth="1.5"/></svg>;
      case 'single-stump':
        return <svg width={iconSize} height={iconSize} viewBox="0 0 25 44"><rect x="9" y="8" width="7" height="28" fill="#d4a574" stroke="#000" strokeWidth="2"/></svg>;
      default:
        return null;
    }
  };

  const equipmentCounts = getEquipmentCounts();
  const equipmentLabels = {
    'red-player': 'Red Players',
    'blue-player': 'Blue Players',
    'bat': 'Bats',
    'white-cone': 'White Cones',
    'blue-cone': 'Blue Cones',
    'yellow-cone': 'Yellow Cones',
    'green-cone': 'Green Cones',
    'ball': 'Balls',
    'tennis-ball': 'Tennis Balls',
    'incrediball': 'Incrediballs',
    'hurdle': 'Hurdles',
    'ramp': 'Katchet Ramps',
    'yellow-pole': 'Yellow Poles',
    'stumps': 'Stumps',
    'single-stump': 'Stump'
  };

  return (
    <div ref={fullscreenRef} className="w-full h-screen bg-gray-100 flex flex-col" style={{ fontFamily: 'Courier, monospace' }}>
      <div className="bg-blue-950 text-white p-4 shadow-lg">
        <h1 className="text-2xl font-black">Cricket Session Planner</h1>
        <div className="flex gap-4 mt-2 flex-wrap">
          <button onClick={() => handleModeChange('training')} className={`px-4 py-2 rounded ${mode === 'training' ? 'bg-blue-800' : 'bg-blue-900'}`}>Training View</button>
          <button onClick={() => handleModeChange('pitch')} className={`px-4 py-2 rounded ${mode === 'pitch' ? 'bg-blue-800' : 'bg-blue-900'}`}>Pitch View</button>
          <button onClick={() => { setDrawMode(!drawMode); setEraserMode(false); }} className={`px-4 py-2 rounded flex items-center gap-2 ${drawMode ? 'bg-yellow-600' : 'bg-blue-900'}`}><Pencil size={16} /> {drawMode ? 'Drawing ON' : 'Draw'}</button>
          <button onClick={() => { setEraserMode(!eraserMode); setDrawMode(false); }} className={`px-4 py-2 rounded flex items-center gap-2 ${eraserMode ? 'bg-orange-600' : 'bg-blue-900'}`}><Eraser size={16} /> {eraserMode ? 'Eraser ON' : 'Eraser'}</button>
          {drawMode && <div className="flex gap-1">{colors.map(c => <button key={c.value} onClick={() => setDrawColor(c.value)} className={`w-10 h-10 rounded-full border-2 ${drawColor === c.value ? 'border-yellow-400' : 'border-gray-600'}`} style={{ backgroundColor: c.value }} title={c.label} />)}</div>}
          <button onClick={toggleFullscreen} className="px-4 py-2 bg-blue-700 rounded flex items-center gap-2">{isFullscreen ? <Minimize size={16} /> : <Maximize size={16} />} Fullscreen</button>
          <button onClick={clearAll} className="px-4 py-2 bg-red-600 rounded flex items-center gap-2"><Trash2 size={16} /> Clear</button>
          <button onClick={() => setShowSaveModal(true)} className="px-4 py-2 bg-blue-700 rounded flex items-center gap-2"><Save size={16} /> Save</button>
          <button onClick={exportToPDF} className="px-4 py-2 bg-blue-700 rounded flex items-center gap-2"><Download size={16} /> Print PDF</button>
        </div>
      </div>

      <div className="flex flex-1 overflow-hidden">
        <div className="w-14 bg-white border-r border-gray-300 p-1 overflow-hidden flex flex-col gap-0.5">
          {tools.map(tool => <button key={tool.id} onClick={() => addElement(tool.id)} className="w-full p-0.5 bg-blue-50 hover:bg-blue-100 rounded border border-blue-200 flex items-center justify-center" style={{ height: '32px' }} title={tool.label}><div style={{ transform: 'scale(0.5)' }}>{renderToolIcon(tool.id)}</div></button>)}
        </div>

        <div className="flex-1 overflow-auto p-4 bg-gray-200">
          <div id="canvas-area" className="relative bg-white shadow-lg mx-auto" style={{ width: '1000px', height: '700px', userSelect: 'none', touchAction: 'none' }} onMouseDown={handleCanvasMouseDown} onMouseMove={handleCanvasMouseMove} onMouseUp={handleCanvasMouseUp} onMouseLeave={handleCanvasMouseUp}>
            {mode === 'training' ? (
              <div className="w-full h-full flex gap-2 p-2">
                <div className="flex-1 flex flex-col gap-2">
                  <div className="border-2 border-black rounded p-2 bg-white" style={{ height: '12%' }}>
                    <input type="text" value={titleText} onChange={(e) => setTitleText(e.target.value)} className="w-full h-full p-1 border border-gray-300 rounded text-base font-bold focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Session Title..." onClick={(e) => e.stopPropagation()} onMouseDown={(e) => e.stopPropagation()} style={{ fontFamily: 'Courier, monospace' }} />
                  </div>
                  <div className="border-2 border-black rounded p-3 bg-white" style={{ height: '24%' }}>
                    <h3 className="font-bold text-sm mb-1" style={{ userSelect: 'none' }}>Goals</h3>
                    <textarea value={goalsText} onChange={(e) => setGoalsText(e.target.value)} className="w-full h-5/6 p-2 border border-gray-300 rounded resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-xs" placeholder="Type goals here..." onClick={(e) => e.stopPropagation()} onMouseDown={(e) => e.stopPropagation()} style={{ fontFamily: 'Courier, monospace' }} />
                  </div>
                  <div className="border-2 border-black rounded p-2 bg-white" style={{ height: '35%' }}>
                    <h3 className="font-bold text-sm mb-1" style={{ userSelect: 'none', fontFamily: 'Courier, monospace' }}>Equipment</h3>
                    <div className="text-xs grid grid-cols-2 gap-x-2 gap-y-0.5" style={{ fontFamily: 'Courier, monospace', fontSize: '10px' }}>
                      {Object.entries(equipmentCounts).map(([type, count]) => (
                        <div key={type} className="flex items-center gap-1">
                          <div style={{ width: '14px', height: '14px', flexShrink: 0 }}>
                            {type.includes('cone') ? (
                              <svg width="14" height="14" viewBox="0 0 30 30">
                                <circle cx="15" cy="15" r="12" fill={
                                  type === 'white-cone' ? '#ffffff' : 
                                  type === 'blue-cone' ? '#3b82f6' : 
                                  type === 'yellow-cone' ? '#eab308' : '#22c55e'
                                } stroke="#000" strokeWidth="2" opacity="0.85"/>
                                <circle cx="15" cy="15" r="5" fill="none" stroke="#000" strokeWidth="1.5"/>
                              </svg>
                            ) : renderEquipmentIcon(type)}
                          </div>
                          <span className="truncate leading-tight">{equipmentLabels[type]}: {count}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  <div className="border-2 border-black rounded p-3 bg-white" style={{ height: '29%' }}>
                    <h3 className="font-bold text-base mb-1" style={{ userSelect: 'none' }}>Notes</h3>
                    <textarea value={notesText} onChange={(e) => setNotesText(e.target.value)} className="w-full h-5/6 p-2 border border-gray-300 rounded resize-none focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Type your notes here..." onClick={(e) => e.stopPropagation()} onMouseDown={(e) => e.stopPropagation()} style={{ fontFamily: 'Courier, monospace' }} />
                  </div>
                </div>
                <div id="setup-box" className="flex-1 border-2 border-black rounded p-3 bg-white">
                  <h3 className="font-bold text-lg mb-2" style={{ userSelect: 'none' }}>Setup</h3>
                </div>
              </div>
            ) : (
              <div className="w-full h-full bg-white flex items-center justify-center" style={{ userSelect: 'none' }}>
                <svg width="680" height="680" viewBox="0 0 680 680">
                  <circle cx="340" cy="340" r="320" fill="none" stroke="#000" strokeWidth="3"/>
                  <circle cx="340" cy="340" r="180" fill="none" stroke="#000" strokeWidth="2" strokeDasharray="10,5"/>
                  <rect x="290" y="230" width="100" height="220" fill="#f5f5f5" stroke="#000" strokeWidth="3"/>
                  <line x1="290" y1="250" x2="390" y2="250" stroke="#000" strokeWidth="2"/>
                  <line x1="290" y1="430" x2="390" y2="430" stroke="#000" strokeWidth="2"/>
                  <line x1="340" y1="250" x2="340" y2="430" stroke="#000" strokeWidth="1" strokeDasharray="5,5"/>
                  <rect x="320" y="245" width="40" height="10" fill="none" stroke="#000" strokeWidth="2"/>
                  <rect x="320" y="425" width="40" height="10" fill="none" stroke="#000" strokeWidth="2"/>
                </svg>
              </div>
            )}
            {elements.map(el => renderElement(el))}
            <canvas ref={drawingCanvasRef} width={1000} height={700} style={{ position: 'absolute', top: 0, left: 0, pointerEvents: (drawMode || eraserMode) ? 'auto' : 'none', cursor: eraserMode ? 'crosshair' : drawMode ? 'crosshair' : 'default', touchAction: 'none' }} />
          </div>
          <p className="text-sm text-gray-600 mt-2 text-center" style={{ fontFamily: 'Courier, monospace' }}>Click elements to move • Double-click to rotate • Right-click to delete • Use Draw/Eraser modes</p>
        </div>
      </div>

      {showSaveModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-96" style={{ fontFamily: 'Courier, monospace' }}>
            <h2 className="text-xl font-bold mb-4 text-blue-950">Save Plan</h2>
            <input type="text" placeholder="Plan name..." value={planName} onChange={(e) => setPlanName(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded mb-4" style={{ fontFamily: 'Courier, monospace' }} />
            <select value={selectedAge} onChange={(e) => setSelectedAge(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded mb-4" style={{ fontFamily: 'Courier, monospace' }}>
              <option value="">Select age group...</option>
              {ageGroups.map(age => <option key={age} value={age}>{age}</option>)}
            </select>
            <div className="flex gap-2">
              <button onClick={savePlan} className="flex-1 px-4 py-2 bg-blue-950 text-white rounded">Save</button>
              <button onClick={() => setShowSaveModal(false)} className="flex-1 px-4 py-2 bg-gray-400 text-white rounded">Cancel</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuickCricketPlan;